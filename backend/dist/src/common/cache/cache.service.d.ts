import { ConfigService } from '@nestjs/config';
export declare class CacheService {
    private configService;
    private readonly logger;
    private readonly redis;
    private readonly defaultTTL;
    constructor(configService: ConfigService);
    private getCacheKey;
    cacheActiveListings(location: string, listings: any[], ttl?: number): Promise<void>;
    getCachedListings(location: string): Promise<any[] | null>;
    cacheUserProfile(userId: string, profile: any, ttl?: number): Promise<void>;
    getCachedUserProfile(userId: string): Promise<any | null>;
    cacheSearchResults(searchQuery: string, filters: any, results: any, page?: number, ttl?: number): Promise<void>;
    getCachedSearchResults(searchQuery: string, filters: any, page?: number): Promise<any | null>;
    cacheCategories(categories: any[], ttl?: number): Promise<void>;
    getCachedCategories(): Promise<any[] | null>;
    cacheLocationData(locations: any[], ttl?: number): Promise<void>;
    getCachedLocationData(): Promise<any[] | null>;
    cacheUserActivity(userId: string, activity: any, ttl?: number): Promise<void>;
    getCachedUserActivity(userId: string): Promise<any | null>;
    cacheTrendingItems(items: any[], location?: string, ttl?: number): Promise<void>;
    getCachedTrendingItems(location?: string): Promise<any[] | null>;
    invalidatePattern(pattern: string): Promise<void>;
    invalidateUserCache(userId: string): Promise<void>;
    invalidateLocationCache(location: string): Promise<void>;
    setSession(sessionId: string, data: any, ttl?: number): Promise<void>;
    getSession(sessionId: string): Promise<any | null>;
    deleteSession(sessionId: string): Promise<void>;
    checkSMSRateLimit(phoneNumber: string, maxAttempts?: number, windowMinutes?: number): Promise<boolean>;
    cacheAPIResponse(endpoint: string, params: any, response: any, ttl?: number): Promise<void>;
    getCachedAPIResponse(endpoint: string, params: any): Promise<any | null>;
    healthCheck(): Promise<boolean>;
    getCacheStats(): Promise<any>;
    warmUpCache(): Promise<void>;
    private generateSearchKey;
    private hashParams;
    private parseRedisInfo;
    onModuleDestroy(): Promise<void>;
}
